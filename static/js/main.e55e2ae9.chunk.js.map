{"version":3,"sources":["components/Header.js","components/Contents.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Contents","useState","confirmedData","setConfirmedData","quarantinedData","setQuarantinedData","comparedData","setComparedData","useEffect","fetchEvents","a","axios","get","res","console","log","makeData","data","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","Active","death","Deaths","recovered","Recovered","findItem","find","push","labels","map","datasets","label","backgroundColor","fill","borderColor","last","length","options","legend","display","position","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qKAceA,EAZA,WACX,OACI,yBAAQC,UAAU,SAAlB,UACA,0CACA,mCACE,kDACA,yD,0DCiHKC,EArHE,WAEb,MAA0CC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA8CF,mBAAS,IAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAAwCJ,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAsFA,OApFAC,qBAAU,WACN,IAAMC,EAAW,uCAAG,4BAAAC,EAAA,sEACEC,IAAMC,IAAI,qDADZ,OACVC,EADU,OAEhBC,QAAQC,IAAIF,GACZG,EAASH,EAAII,MAHG,2CAAH,qDAKXD,EAAW,SAACE,GACd,IAAMC,EAAMD,EAAME,QAAO,SAACC,EAAIC,GAC1B,IAAMC,EAAc,IAAIC,KAAKF,EAAIE,MAC3BC,EAAOF,EAAYG,cACnBC,EAAQJ,EAAYK,WACpBC,EAAON,EAAYO,UACnBC,EAAYT,EAAIU,UAChBC,EAASX,EAAIY,OACbC,EAAQb,EAAIc,OACZC,EAAYf,EAAIgB,UAEhBC,EAAWlB,EAAImB,MAAK,SAAA9B,GAAC,OAAEA,EAAEe,OAASA,GAAQf,EAAEiB,QAAUA,KAqB5D,OApBIY,GACAlB,EAAIoB,KAAK,CACLhB,KAAKA,EACLE,MAAMA,EACNE,KAAKA,EACLE,UAAUA,EACVE,OAAOA,EACPE,MAAMA,EACNE,UAAUA,IAGfE,GAAYA,EAASV,KAAOA,IAC3BU,EAASN,OAASA,EAClBM,EAASJ,MAAQA,EACjBI,EAASV,KAAOA,EAChBU,EAASR,UAAYA,EACrBQ,EAASd,KAAOA,EAChBc,EAASZ,MAAQA,EACjBY,EAASF,UAAYA,GAElBhB,IACR,IAGGqB,EAAQvB,EAAIwB,KAAI,SAAAjC,GAAC,gBAAMA,EAAEe,KAAR,kBAAiBf,EAAEiB,MAAM,EAAzB,aACvBxB,EAAiB,CACbuC,OAASA,EACTE,SAAW,CACP,CACIC,MAAQ,+CACRC,gBAAkB,SAClBC,MAAO,EACP9B,KAAOE,EAAIwB,KAAI,SAAAjC,GAAC,OAAEA,EAAEqB,iBAKhC1B,EAAmB,CACfqC,OAASA,EACTE,SAAW,CACP,CACIC,MAAQ,+CACRG,YAAc,SACdD,MAAO,EACP9B,KAAOE,EAAIwB,KAAI,SAAAjC,GAAC,OAAEA,EAAEuB,cAKhC,IAAMgB,EAAO9B,EAAIA,EAAI+B,OAAQ,GAC7B3C,EAAgB,CACZmC,OAAS,CAAC,qBAAM,2BAAO,gBACvBE,SAAW,CACP,CACIC,MAAQ,mEACRC,gBAAiB,CAAC,UAAW,UAAU,WACvCE,YAAc,CAAC,UAAW,UAAU,WACpCD,MAAO,EACP9B,KAAO,CAACgC,EAAKlB,UAAUkB,EAAKZ,UAAUY,EAAKd,YAM3D1B,MACD,IAEC,oCACA,8EACA,sBAAKV,UAAU,WAAf,UACI,8BACI,cAAC,IAAD,CAAKkB,KAAMf,EAAeiD,QAEtB,CAAEC,OAAS,CAACC,SAAU,EAAMC,SAAU,eAG9C,8BACI,cAAC,IAAD,CAAMrC,KAAMb,EAAiB+C,QAEzB,CAAEC,OAAS,CAACC,SAAU,EAAMC,SAAU,eAG9C,8BACI,cAAC,IAAD,CAAUrC,KAAMX,EAAc6C,SACM,wDAAD,QAAkB,IAAI3B,MAAOI,WAAW,EAAxC,WAC/B,CAAEwB,OAAS,CAACC,SAAU,EAAMC,SAAU,uBCnG3CC,MATf,WACE,OACE,sBAAKxD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCGSyD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e55e2ae9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n        <h1>COVID-19</h1>\r\n        <select>\r\n          <option>국내</option>\r\n          <option>해외</option>\r\n        </select>\r\n      </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import {useState, useEffect} from 'react'\r\nimport {Bar, Doughnut, Line} from 'react-chartjs-2'\r\nimport axios from 'axios'\r\n\r\nconst Contents = () => {\r\n\r\n    const [confirmedData, setConfirmedData] = useState({})\r\n    const [quarantinedData, setQuarantinedData] = useState({})\r\n    const [comparedData, setComparedData] = useState({})\r\n\r\n    useEffect(()=>{\r\n        const fetchEvents = async ()=>{\r\n            const res = await axios.get(\"http://api.covid19api.com/total/dayone/country/kr\");\r\n            console.log(res);\r\n            makeData(res.data)\r\n        }\r\n        const makeData = (items)=>{\r\n            const arr = items.reduce((acc,cur)=>{\r\n                const currentDate = new Date(cur.Date);\r\n                const year = currentDate.getFullYear();\r\n                const month = currentDate.getMonth();\r\n                const date = currentDate.getDate();\r\n                const confirmed = cur.Confirmed;\r\n                const active = cur.Active;\r\n                const death = cur.Deaths;\r\n                const recovered = cur.Recovered;\r\n\r\n                const findItem = acc.find(a=>a.year === year && a.month === month);\r\n                if(!findItem){\r\n                    acc.push({\r\n                        year:year, \r\n                        month:month, \r\n                        date:date, \r\n                        confirmed:confirmed, \r\n                        active:active, \r\n                        death:death,\r\n                        recovered:recovered\r\n                    })\r\n                }\r\n                if(findItem && findItem.date < date){\r\n                    findItem.active = active;\r\n                    findItem.death = death;\r\n                    findItem.date = date;\r\n                    findItem.confirmed = confirmed;\r\n                    findItem.year = year;\r\n                    findItem.month = month;\r\n                    findItem.recovered = recovered;\r\n                }\r\n                return acc;\r\n            }, [])\r\n\r\n\r\n            const labels =arr.map(a=> `${a.year}년 ${a.month+1}월`);\r\n            setConfirmedData({\r\n                labels : labels,\r\n                datasets : [\r\n                    {\r\n                        label : \"국내 누적 확진자\", \r\n                        backgroundColor : \"salmon\",\r\n                        fill : true,\r\n                        data : arr.map(a=>a.confirmed)\r\n                    },\r\n                ]\r\n            \r\n            });\r\n            setQuarantinedData({\r\n                labels : labels,\r\n                datasets : [\r\n                    {\r\n                        label : \"월별 격리자 현황\", \r\n                        borderColor : \"salmon\",\r\n                        fill : false,\r\n                        data : arr.map(a=>a.active)\r\n                    },\r\n                ]\r\n            \r\n            });\r\n            const last = arr[arr.length -1]\r\n            setComparedData({\r\n                labels : [\"확진자\",\"격리해제\",\"사망\"],\r\n                datasets : [\r\n                    {\r\n                        label : \"누적 확진,해제,사망 비율\", \r\n                        backgroundColor :[\"#ff3d67\", \"#059bff\",\"#ffc233\"],\r\n                        borderColor : [\"#ff3d67\", \"#059bff\",\"#ffc233\"],\r\n                        fill : false,\r\n                        data : [last.confirmed,last.recovered,last.death]\r\n                    },\r\n                ]\r\n            \r\n            });\r\n        }\r\n        fetchEvents()\r\n    }, [])\r\n    return (\r\n        <section>\r\n        <h2>국내 코로나 현황</h2>\r\n        <div className=\"contents\">\r\n            <div>\r\n                <Bar data={confirmedData} options={\r\n                    { title : {display : true, text: \"누적 확진자 추이\", fontSie:16} },\r\n                    { legend : {display : true, position: \"bottom\"} }\r\n                } />\r\n            </div>\r\n            <div>\r\n                <Line data={quarantinedData} options={\r\n                    { title : {display : true, text: \"월별 격리자 현황\", fontSie:16} },\r\n                    { legend : {display : true, position: \"bottom\"} }\r\n                } />\r\n            </div>\r\n            <div>\r\n                <Doughnut data={comparedData} options={\r\n                    { title : {display : true, text: `누적 확진,해제,사망 (${new Date().getMonth()+1}월)`, fontSie:16} },\r\n                    { legend : {display : true, position: \"bottom\"} }\r\n                } />\r\n            </div>\r\n        </div>\r\n      </section>\r\n    )\r\n}\r\n\r\nexport default Contents\r\n","\nimport './App.css';\nimport Header from './components/Header';\nimport Contents from './components/Contents';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Contents />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}